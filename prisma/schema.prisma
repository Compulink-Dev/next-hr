// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  Item        Item[]
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String
  Item         Item[]
  createdAt    DateTime @default(now())
  updateAt     DateTime @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  Item      Item[]
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
}

model Warehouse {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String?
  description   String?
  warehouseType String
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
  Item          Item[]
}

model Supplier {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  phone         String?
  email         String?
  address       String?
  contactPerson String?
  supplierCode  String   @unique
  paymentTerms  String?
  taxID         String?
  notes         String?
  Item          Item[]
  createdAt     DateTime @default(now())
  updateAt      DateTime @updatedAt
}

model Item {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String?
  categoryId              String                    @db.ObjectId
  category                Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sku                     String
  barcode                 String
  quantity                Int
  unit                    Unit                      @relation(fields: [unitId], references: [id])
  unitId                  String                    @db.ObjectId
  brand                   Brand                     @relation(fields: [brandId], references: [id])
  brandId                 String                    @db.ObjectId
  supplier                Supplier                  @relation(fields: [supplierId], references: [id])
  supplierId              String                    @db.ObjectId
  warehouse               Warehouse                 @relation(fields: [warehouseId], references: [id])
  warehouseId             String                    @db.ObjectId
  contactPerson           String?
  sellingPrice            Float
  buyingPrice             Float
  reOrderPoint            Int
  location                String?
  imageUrl                String
  weight                  Float?
  dimensions              String?
  taxRate                 Float
  notes                   String?
  TransferStockAdjustment TransferStockAdjustment[]
  AddStockAdjustment      AddStockAdjustment[]
  createdAt               DateTime                  @default(now())
  updateAt                DateTime                  @updatedAt
}

model AddStockAdjustment {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber      String
  addStockQty          Float
  notes                String?
  receivingWarehouseId String   @db.ObjectId
  item                 Item     @relation(fields: [itemId], references: [id])
  itemId               String   @db.ObjectId
  createdAt            DateTime @default(now())
  updateAt             DateTime @updatedAt
}

model TransferStockAdjustment {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  referenceNumber      String
  item                 Item     @relation(fields: [itemId], references: [id])
  itemId               String   @db.ObjectId
  transferStockQty     Float
  givingWarehouseId    String   @db.ObjectId
  receivingWarehouseId String   @db.ObjectId
  notes                String?
  createdAt            DateTime @default(now())
  updateAt             DateTime @updatedAt
}
