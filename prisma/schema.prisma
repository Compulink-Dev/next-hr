// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Category {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String?
  Item        Item[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Unit {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  abbreviation String
  Item         Item[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Brand {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  Item      Item[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Warehouse {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  location      String?
  description   String?
  warehouseType String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  stockQty      Int      @default(0)
  Item          Item[]
}

model Supplier {
  id                 String               @id @default(auto()) @map("_id") @db.ObjectId
  name               String
  phone              String?
  email              String?
  address            String?
  contactPerson      String?
  supplierCode       String               @unique
  paymentTerms       String?
  taxID              String?
  notes              String?
  Item               Item[]
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  AddStockAdjustment AddStockAdjustment[]
}

model Customer {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  phone          String?
  email          String?
  address        String?
  company        String?
  notes          String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  JobCard        JobCard[]
  SalesReport    SalesReport[]
  ProjectsReport ProjectsReport[]
}

model SalesOrder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  quantity    Float
  unit        String
  price       Float
  discount    Float?
  vat         Float?
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Shipment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalesInvoice {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Payments {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  price          Float
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  PaymentsReport PaymentsReport[]
}

model CreditNotes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DebitNotes {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PurchaseOrder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  quantity    String
  unit        String
  price       Float
  discount    Float
  vat         Float
  total       Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  role           String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  userId         String?   @db.ObjectId

  // Relations
  companies                 Company[]
  leads                     Lead[]
  Loans                     Loans[]
  Reports                   Reports[]
  Leave                     Leave[]
  Payslip                   Payslip[]
  Employee                  Employee[]
  FleetInvoice              FleetInvoice[]
  Vehicle                   Vehicle[]
  Driver                    Driver[]
  JobCard                   JobCard[]
  SalesReport               SalesReport[]
  PurchaseReport            PurchaseReport[]
  FleetReport               FleetReport[]
  HrReport                  HrReport[]
  ProjectsReport            ProjectsReport[]
  Interview                 Interview[]
  Log                       Log[]
  createdInterviewAccesses  InterviewAccess[] @relation("InterviewAccessCreator")
  assignedInterviewAccesses InterviewAccess[] @relation("InterviewAccessAssignee")
  Review                    Review[]
  Document                  Document[]
  Deal                      Deal[]
  Campaign                  Campaign[]
  Task                      Task[]
  requisitionsRequested     Requisition[]     @relation("RequisitionRequester")
  requisitionsApproved      Requisition[]     @relation("RequisitionApprover")
}

model Purchase {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Reports {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Loans {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  payment     String
  type        String
  amount      Float
  repayment   String
  repayments  Int?
  reason      String?
  interest    Float?
  installment Float?
  attachment  String?
  status      String?
  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  HRReport    HrReport[]
}

model Leave {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String?
  type       String
  source     String?
  from       DateTime
  to         DateTime
  duration   String
  contact    String?
  reason     String?
  attachment String?
  status     String?
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  HRReport   HrReport[]
}

model Payslip {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  period     String
  attachment String?
  imageUrl   String?
  status     String?
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Employee {
  id            String          @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?
  phone         String
  address       String
  title         String
  appliedDate   String
  status        String
  Certification Certification[]
  Training      Training[]
  userId        String          @db.ObjectId
  user          User            @relation(fields: [userId], references: [id])
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model FleetInvoice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  vehicleId   String?  @db.ObjectId
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  location    String?
  time        String?
  paymentType String
  amount      Float
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Log {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      DateTime
  time      String
  mileage   Int
  details   String
  remarks   String?
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle {
  id              String         @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  numberPlate     String
  serviceDate     String
  assignedUser    String?
  nextService     String
  serviceType     String
  radioLicense    String
  vehicleLicense  String
  mileage         Float
  status          String
  transitStart    DateTime?
  transitEnd      DateTime?
  transitDuration Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  userId          String?        @db.ObjectId
  user            User?          @relation(fields: [userId], references: [id])
  Driver          Driver[]
  FleetInvoice    FleetInvoice[]
  SalesReport     SalesReport[]
  FleetReport     FleetReport[]
  Tracking        Tracking[]
}

model Driver {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  licenseNumber String?
  vehicleId     String?  @db.ObjectId
  vehicle       Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  status        String
  userId        String?  @db.ObjectId
  user          User?    @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Integration {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  subTitle   String
  attachment String
  category   String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum Visibility {
  private
  shared
  org
}

model Document {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  subTitle   String
  attachment String
  category   String
  visibility Visibility @default(private)
  sharedWith String[]
  userId     String     @db.ObjectId
  user       User       @relation(fields: [userId], references: [id])
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
}

model Item {
  id                      String                    @id @default(auto()) @map("_id") @db.ObjectId
  name                    String
  description             String?
  categoryId              String                    @db.ObjectId
  category                Category                  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  sku                     String
  barcode                 String
  quantity                Int
  unit                    Unit                      @relation(fields: [unitId], references: [id], onDelete: Cascade)
  unitId                  String                    @db.ObjectId
  brand                   Brand                     @relation(fields: [brandId], references: [id], onDelete: Cascade)
  brandId                 String                    @db.ObjectId
  supplier                Supplier                  @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId              String                    @db.ObjectId
  warehouse               Warehouse                 @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  warehouseId             String                    @db.ObjectId
  contactPerson           String?
  sellingPrice            Float
  buyingPrice             Float
  reOrderPoint            Int
  location                String?
  imageUrl                String
  weight                  Float?
  dimensions              String?
  taxRate                 Float
  notes                   String?
  TransferStockAdjustment TransferStockAdjustment[]
  AddStockAdjustment      AddStockAdjustment[]
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  SalesReport             SalesReport[]
  PaymentsReport          PaymentsReport[]
}

model AddStockAdjustment {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  referenceNumber      String
  addStockQty          Float
  notes                String?
  supplier             Supplier @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  supplierId           String   @db.ObjectId
  receivingWarehouseId String   @db.ObjectId
  item                 Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId               String   @db.ObjectId
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model TransferStockAdjustment {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  name                 String
  referenceNumber      String
  item                 Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId               String   @db.ObjectId
  transferStockQty     Float
  givingWarehouseId    String   @db.ObjectId
  receivingWarehouseId String   @db.ObjectId
  notes                String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model JobCard {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  customer      Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId    String   @db.ObjectId
  contactPerson String
  engineerId    String   @db.ObjectId
  serialNumber  String
  equipment     String
  fault         String
  labourHours   Float
  travelTime    Float
  mileage       Float
  userId        String   @db.ObjectId
  user          User     @relation(fields: [userId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Certification {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  startDate   String
  endDate     String
  duration    Float?
  userId      String?   @db.ObjectId
  user        Employee? @relation(fields: [userId], references: [id], onDelete: Cascade)
  image       String?
  description String
  price       String?
  modality    String?
  attachment  String?
  status      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Interview {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  post              String?
  qualification     String?
  training          String?
  experience        String?
  details           String?
  knowledge         String?
  attributes        String?
  packages          String?
  rating            Int?
  comment           String?
  userId            String   @db.ObjectId
  user              User     @relation(fields: [userId], references: [id])
  Review            Review[]
  assignedPanelists String[]
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model Review {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  interviewId String    @db.ObjectId
  interview   Interview @relation(fields: [interviewId], references: [id])
  panelistId  String    @db.ObjectId
  panelist    User      @relation(fields: [panelistId], references: [id])
  rating      Int
  comment     String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model InterviewAccess {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  code         String   @unique
  createdById  String   @db.ObjectId
  createdBy    User     @relation(name: "InterviewAccessCreator", fields: [createdById], references: [id])
  assignedTo   User?    @relation(name: "InterviewAccessAssignee", fields: [assignedToId], references: [id])
  assignedToId String?  @db.ObjectId
  expiresAt    DateTime
  used         Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([createdById])
}

model Training {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  startDate   String
  endDate     String
  duration    Float?
  image       String?
  userId      String?   @db.ObjectId
  user        Employee? @relation(fields: [userId], references: [id], onDelete: Cascade)
  price       Float?
  description String
  modality    String?
  attachment  String?
  status      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model SalesReport {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  vehicleId   String?   @db.ObjectId
  vehicle     Vehicle?  @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  clientId    String?   @db.ObjectId
  customer    Customer? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  productId   String?   @db.ObjectId
  item        Item?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  location    String?
  time        String?
  paymentType String
  amount      Float
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Sales CRM enums
enum LeadStatus {
  new
  contacted
  qualified
  unqualified
  converted
}

enum DealStatus {
  open
  won
  lost
}

enum TaskStatus {
  open
  in_progress
  done
}

enum EntityType {
  company
  lead
  deal
  campaign
}

// Sales CRM models
model Company {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  website     String?
  email       String?
  phone       String?
  address     String?
  description String?
  ownerId     String?  @db.ObjectId
  owner       User?    @relation(fields: [ownerId], references: [id])
  leads       Lead[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  Deal        Deal[]
}

model PipelineStage {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String
  order Int
  Deal  Deal[]
}

model Lead {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String?
  phone     String?
  source    String?
  status    LeadStatus @default(new)
  companyId String?    @db.ObjectId
  company   Company?   @relation(fields: [companyId], references: [id])
  ownerId   String?    @db.ObjectId
  owner     User?      @relation(fields: [ownerId], references: [id])
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  Deal      Deal[]
}

model Deal {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  amount      Float
  status      DealStatus     @default(open)
  probability Int?
  closeDate   String?
  stageId     String?        @db.ObjectId
  stage       PipelineStage? @relation(fields: [stageId], references: [id])
  companyId   String?        @db.ObjectId
  company     Company?       @relation(fields: [companyId], references: [id])
  leadId      String?        @db.ObjectId
  lead        Lead?          @relation(fields: [leadId], references: [id])
  ownerId     String?        @db.ObjectId
  owner       User?          @relation(fields: [ownerId], references: [id])
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Campaign {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  type      String?
  channel   String?
  status    String   @default("active")
  startDate String?
  endDate   String?
  budget    Float?
  ownerId   String?  @db.ObjectId
  owner     User?    @relation(fields: [ownerId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  dueDate     String?
  status      TaskStatus @default(open)
  entityType  EntityType
  entityId    String
  ownerId     String?    @db.ObjectId
  owner       User?      @relation(fields: [ownerId], references: [id])
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model AnalyticsEvent {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  metric     String
  value      Float
  entityType EntityType
  entityId   String
  context    String?
  createdAt  DateTime   @default(now())
}

model PurchaseReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  date        String?
  creditName  String?
  quantity    Int
  price       Float
  description String
  technician  String
  paymentType String
  attachment  String?
  status      String?
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FleetReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  mileage     String
  receiptNo   String
  description String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  vehicleId   String?  @db.ObjectId
  vehicle     Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HrReport {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  date      String?
  loanId    String?  @db.ObjectId
  loan      Loans?   @relation(fields: [loanId], references: [id], onDelete: Cascade)
  leaveId   String?  @db.ObjectId
  leave     Leave?   @relation(fields: [leaveId], references: [id], onDelete: Cascade)
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PaymentsReport {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  invoiceNo String
  productId String?   @db.ObjectId
  product   Item?     @relation(fields: [productId], references: [id], onDelete: Cascade)
  paymentId String?   @db.ObjectId
  payment   Payments? @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model ProjectsReport {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  purpose     String
  destination String
  startDate   String
  endDate     String
  status      String
  clientId    String?   @db.ObjectId
  client      Customer? @relation(fields: [clientId], references: [id], onDelete: Cascade)
  userId      String    @db.ObjectId
  user        User      @relation(fields: [userId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Requisition {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  purpose     String
  amount      Float
  status      String   @default("pending")
  attachment  String?
  projectId   String?  @db.ObjectId
  requestedBy String   @db.ObjectId
  requester   User     @relation(name: "RequisitionRequester", fields: [requestedBy], references: [id])
  approvedBy  String?  @db.ObjectId
  approver    User?    @relation(name: "RequisitionApprover", fields: [approvedBy], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tracking {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  latitude  Float
  longitude Float
  timestamp DateTime @default(now())
  vehicleId String?  @db.ObjectId
  vehicle   Vehicle? @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}
